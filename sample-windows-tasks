Installing Windows Applications with Chocolatey:

tasks:
- name: Ensure Chocolatey is installed
  win_chocolatey:
    name: chocolatey
    state: present

- name: Install multiple packages sequentially
  win_chocolatey:
   name: '{{ item }}'
   state: present
  loop:
    - procexp
    - windirstat
    - 7zip
    - git
    - python

- name: Check python version
  ansible.windows.win_command: python --version
  register: check_python_version

- name: Show python version
  ansible.builtin.debug:
   msg: Python Version is {{ check_python_version.stdout_lines[0] }}

=------

Promoting Windows to a Domain Controller:

   - name: Ensure local Administrator account has a password
     ansible.windows.win_user:
      name: "{{ username }}"
      password: "{{ user_password }}"

   - name: Promote system to a domain Controller
     microsoft.ad.domain:
      dns_domain_name: "{{ wins_domain }}"
      safe_mode_password: "{{ safe_password }}"
      domain_mode: Win2012R2
      forest_mode: Win2012R2
      reboot: true

   - name: Firewall rule to allow RDP on TCP port 5986
     win_firewall_rule:
      name: WinRM
      localport: 5986
      action: allow
      direction: in
      protocol: tcp
      profiles: domain,private,public
      state: present
      enabled: yes

=--------

 Creating users, groups and OU in the Active Directory

   - name: Create a group in an OU
     microsoft.ad.group:
      identity: "{{ group_name }}"
      scope: global
      path: "{{ ou_path }}"
      state: present

   - name: Create users for lab
     microsoft.ad.user:
      identity: "{{ item.key }}"
      password: "{{ user_password }}"
      firstname: "{{ item.value.firstname }}"
      surname: "{{ item.value.surname }}"
      state: present
      groups:
       set:
        - "{{ group_name }}"
        - Domain Users
     loop: "{{ users_list | dict2items }}"

   - name: Create Ansible Admin
     microsoft.ad.user:
      identity: "{{ admin_user }}"
      password: "{{ admin_password }}"
      firstname: "Ansible AD"
      surname: "Administrator"
      state: present
      groups:
       set:
        - Domain Admins
        - Domain Users

 ==---------
   - name: Join host to Domain
     microsoft.ad.membership:
      dns_domain_name: "{{ wins_domain }}"
      hostname: "{{ inventory_hostname }}"
      domain_admin_user: Administrator
      domain_admin_password: "{{ safe_password }}"
      domain_server: "{{ hostname_cleaned }}"
      state: domain
      reboot: true
----------
Modifing the haproxy config:

   - name: Resolve DNS server hostname to IP
     set_fact:
       host_ip: "{{ lookup('dig', host) }}"

  - name: Add static hosts to load balancer
    ansible.builtin.lineinfile:
      path: /etc/haproxy/haproxy.cfg
      line: "server static-{{ host}} {{ host_ip }}:80 check"
      insertafter: '^## STATIC CONFIG ANSIBLE'
      state: present

   - name: Add webapp hosts to load balancer
     ansible.builtin.lineinfile:
      path: /etc/haproxy/haproxy.cfg
      line: "server webapp-{{ host }} {{ host_ip }}:80 check"
      insertafter: '^## APP CONFIG ANSIBLE'
      state: present
     notify:
      - restart haproxy

  handlers:
    - name: restart haproxy
      service:
        name: haproxy
        state: restarted
